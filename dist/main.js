!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n=function(e){return Array.isArray(e)||"object"==typeof e},i=function(e){return Array.isArray(e)},a=function(e){return"string"==typeof e},s=function(e){return arguments.length&&(void 0===e||void 0===e)},o=function(e){return null===e||""===e},l=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},u=function(e,t=!0){return i(e)?e:!t&&l(e)?[e]:!1!==e&&0!==e&&function(e){return o(e)||s(e)||!1===e||0===e||n(e)&&!Object.keys(e).length}(e)?[]:function(e){return!a(e)&&!s(e.length)}(e)?Array.prototype.slice.call(e):l(e)?Object.values(e):[e]},f=function(e,t=null){var r={};return 2===arguments.length&&(a(e)?r[e]=t:i(e)&&i(t)&&e.forEach((e,n)=>r[e]=t[n])),r},c=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},g=function(e){return function(e){return"function"==typeof e}(e)||e&&"[object function]"==={}.toString.call(e)},h=function(e,t){var r=void 0;return n(e)&&Object.keys(e).forEach((n,i)=>{!1!==r&&(r=t(c(n)?parseFloat(n):n,e[n],i))}),r},p=class{constructor(e,t={}){this.$={},this.$.target=e,this.$.details=t,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],h(t,(e,t)=>{"$"!==e&&Object.defineProperty(this,e,{value:t})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(e){if(!(e instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(e),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(e){var t,r=l(e)&&!s(e.propagationStopped)&&!s(e.defaultPrevented);!1===e||r&&e.propagationStopped?this.stopPropagation():!1===e||r&&e.defaultPrevented?this.preventDefault():(e instanceof Promise&&(t=e)||r&&(t=e.promises))&&this.promise(t)}},d=class extends p{constructor(e,t={}){super(e,t)}},y=function(e){return"number"==typeof e},v=function(e){return l(e)&&Object.getPrototypeOf(e)===Object.prototype},b=function(e){return!0===e||!1===e};const m=function(e,t,r=!0,a=1){if(i(e)&&i(t)&&e.length!==t.length)return!r;if(l(e)&&l(t)){var s=Object.keys(e),o=Object.keys(t);if(!s.length&&!o.length)return v(e)&&v(t)?r:e===t===r;if(!m(s,o))return!r}if(a>0&&(i(e)&&i(t)||l(e)&&l(t))){var u=function(e,t,r=!0,a=!0,s=!1,o=!1){if(i(e)&&i(t)){var u=[],f=!0;return e.forEach(e=>{if(f){var c=!1;h(t,(t,s)=>{(!c||a&&n(e))&&(c=r(e,s),(i(c)&&!c.length||l(c)&&!Object.keys(c).length)&&(c=!1),n(c)&&a&&(e=c))}),n(c)?u.push(a?c:e):b(c)?s&&!c||!s&&c?u.push(e):o&&(f=!1):u.push(c)}}),u}if(l(e)&&l(t)){u={},f=!0;return Object.keys(e).forEach(c=>{if(f){var g=r(e[c],t[c]);(i(g)&&!g.length||l(g)&&!Object.keys(g).length)&&(g=!1),n(g)?u[c]=a?g:e[c]:b(g)?s&&!g||!s&&g?u[c]=e[c]:o&&(f=!1):u[c]=g}}),u}}(e,t,(e,t)=>m(e,t,r,a-1),!1,!1,!0);return i(u)?u.length===e.length&&u.length===t.length:l(u)&&l(e)?Object.keys(u).length===Object.keys(e).length&&Object.keys(u).length===Object.keys(t).length:u}return g(r)?r(e,t):y(e)&&y(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var w=m,E=class{disconnect(){this.disconnected=!0}},F=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(e){return this.fireables.push(e),e}removeFireable(e,t=[]){this.fireables=this.fireables.filter(t=>t!==e)}findFireables(e){return this.fireables.filter(t=>!(e.handler&&t.handler!==e.handler||e.params&&(e.params.type&&t.params.type!==e.params.type||e.params.tags&&function(e,t,r=null){return i(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]}(t.params.tags||[],e.params.tags).length!==e.params.tags.length)))}static createForTarget(e,t,r){var i;if(e&&n(e))return(i=e[j])||(i={},Object.defineProperty(e,j,{get:()=>i,set:e=>{if(e!==i)throw new Error('Attempt to overwrite the "'+j+'" special property!')},enumerable:!1})),i[t]="listeners"===t?new r(e):new r,i[t]}static getForTarget(e,t){var r;if(e&&n(e)&&(r=e[j]))return r[t]}};const j="< r e f l e x >";var O=class extends E{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e,t,r){return this.disconnected||this.params.type&&this.params.type!==e.type?t(...u(arguments).slice(2)):this.handler(e,r,t)}};class T extends F{fire(e,t=null){if(this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.query===e.query).length)return t?t():void 0;this.currentlyFiringEvents.push(e);const r=(n,...i)=>{var a=this.fireables[n];return a?a.fire(e,(...e)=>r(n+1,...e),...i):t?t(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(e){return super.createForTarget(e,"traps",T)}static getForTarget(e){return super.getForTarget(e,"traps")}}var D=function(e,...t){return t.forEach(t=>{e.indexOf(t)<0&&e.push(t)}),e},P=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!i(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{D(r,...Object.getOwnPropertyNames(e))}),r};function _(e,t,r=!1,a=!1,s=!0){var o=0,u=e.shift();if((c(u)||!0===u||!1===u)&&(o=u,u=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,f)=>{(n(e)||g(e))&&(r?P(e):Object.getOwnPropertyNames(e)).forEach(n=>{var g=u[n],h=e[n];if((i(g)&&i(h)||l(g)&&l(h))&&(!0===o||o>0))u[n]=i(g)&&i(h)?[]:{},_([c(o)?o-1:o,u[n],g,h],t,r,a,s);else if(t(n,u,e,f))if(i(u)&&i(e))a?u[n]=h:u.push(h);else try{s?Object.defineProperty(u,n,Object.getOwnPropertyDescriptor(e,n)):u[n]=e[n]}catch(e){}})}),u}var k=function(e,t=[],r=!0){var a=0;return c(arguments[0])&&n(arguments[1])&&(a=arguments[0],e=arguments[1],t=arguments[2]||[]),_([a,{},e],(e,r,n)=>g(t)?t(e):!i(t)||!t.length||t.indexOf(e)>-1,!1,!1,r)},x=function(...e){return _(e,(e,t,r)=>!0,!1,!1,!1)},$=class extends p{constructor(e,t={}){if(t.data&&(t.fields=Object.keys(t.data)),super(e,t),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(e=>{var t=r+"."+e;this.originatingFields.push(t),this.originatingData[t]=this.srcEvt.originatingData[e],this._originatingData[t]=this.srcEvt._originatingData[e]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=w(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class C extends F{findFireables(e){return super.findFireables(e).filter(t=>o(e.fields)||s(e.fields)||w(u(t.fields),u(e.fields)))}fire(e){return this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.fields===e.fields).length||(this.currentlyFiringEvents.push(e),this.fireables.forEach(t=>{e.propagationStopped||t.params.type&&t.params.type!==e.type||t.fire(e)}),this.currentlyFiringEvents.pop()),e}static createForTarget(e){return super.createForTarget(e,"observers",C)}static getForTarget(e){return super.getForTarget(e,"observers")}}var A=function(e,t,r=null,i={}){if(!e||!n(e))throw new Error("Object must be of type object!");var a;(g(t)||o(t)||s(t))&&(i=arguments.length>2?r:{},r=t,t=null),(a=C.getForTarget(e))&&a.findFireables({handler:r,fields:t,params:i}).forEach(e=>{a.removeFireable(e)})},S=function(e,t,r){A(r,null,{tags:["#e-bubbling",t,e]})},N=function(e){return typeof e},q=function(e,t,r={},i={}){t=u(t).slice();for(var a=e;!s(a)&&!o(a)&&t.length;){var l=t.shift();if(!(r.get?r.get(a,l):n(a)?l in a:a[l]))return void(i.exists=!1);a=r.get?r.get(a,l):a[l]}return i.exists=!0,a},W=class extends E{constructor(e,t=null,r={}){if(super(),this.handler=e,this.fields=t,this.params=r,this.fieldsArray=u(this.fields),this.isDynamicField=this.fieldsArray.filter(e=>e.indexOf("..")>-1||e.startsWith(".")||e.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(e){this.disconnected||this.params.type&&this.params.type!==e.type||e.dataEven&&!1!==this.params.diff||this.fireCallback(e,t=>{if(t){var r=[],n=[];return!1!==this.params.data&&t.forEach(t=>{var i=e.originatingFields.reduce((r,n)=>{var i=e.originatingData[n],a=e._originatingData[n];if(!r&&t===n)return[i,a];if(!r&&(t+".").startsWith(n+".")){var s=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)}(t,n+".");return[q(i,s.split("."),{get:Q}),q(a,s.split("."),{get:Q})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var s=q(e.target,a(t)?t.split("."):t,{get:Q});r.push(s),n.push(s)}}),i(this.fields)?e.response(this.handler(r,n,e)):e.response(this.handler(r[0],n[0],e))}r={},n={};return e.fields.forEach(t=>{var i=t in e.data?e.data[t]:Q(e.target,t),a=t in e._data?e._data[t]:i;r[t]=i,n[t]=a}),e.response(this.handler(r,n,e))})}fireCallback(e,t){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((t,n)=>(t=a(t)?t.replace(/`/g,""):t,r[n]=[],e.originatingFields.filter(i=>{var a=i.split("."),s=this.isDynamicField?t.split(".").map((e,t)=>e||a[t]||"").join("."):t;return D(r[n],s),(s===i&&!e.srcEvt||!1!==this.params.observeUp&&(s+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(s+"."))&&(!this.isDynamicField||!s.split(".").filter(e=>!e).length)}).length)).length&&(n=r,n.reduce((e,t)=>{var r=[];return e.forEach(e=>{u(t).forEach(t=>{var n=e.slice();n.push(t),r.push(n)})}),r},[[]])).forEach(t)}else e.srcEvt&&!this.params.observeDown||t();var n}},I=function(e,t,r=null,i={}){if(!e||!n(e))throw new Error("Object must be of type object!");if(g(t)&&(i=arguments.length>2?r:{},r=t,t=null),!g(r))throw new Error('Callback must be a function; "'+N(r)+'" given!');var a;return(a=C.getForTarget(e))||(a=C.createForTarget(e)),a.addFireable(new W(r,t,i))},M=function(e,t,r){var n;I(r,(i,a,s)=>{if(n=C.getForTarget(e)){var o=f(t,r);return n.fire(new $(e,{type:s.type,bubbling:!0,data:o,_data:o,srcEvt:s}))}},{observeDown:!0,tags:["#e-bubbling",t,e]})},K=function(e,t,r=[],a=!1){var s=e.map((e,t)=>{if(!e||!n(e))throw new Error("Target must be of type object!");return{target:e,targetCopy:k(e,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),o=t(...e);return s.map(e=>{var t,s,o,l=Object.keys(e.targetCopy),u=Object.keys(e.target),f=(t=l.concat(u),t.filter((e,t,r)=>r.indexOf(e)===t)).filter(t=>{if(!(r.length&&!r.includes(t)||i(e.target)&&("length"===t||"< r e f l e x >"===t))){if(u.includes(t)?(e._setData[t]=e.targetCopy[t],e.setData[t]=e.target[t],l.includes(t)||e.created.push(t)):(e._delData[t]=e.targetCopy[t],e.delData[t]=void 0,e.deleted.push(t)),e.targetCopy[t]!==e.target[t])return e.targetCopy[t]&&n(e.targetCopy[t])&&S(e.target,t,e.targetCopy[t]),e.target[t]&&n(e.target[t])&&M(e.target,t,e.target[t]),!0;delete e.setData[t],delete e._setData[t]}});return((o=C.getForTarget(e.target))||a)&&(s=new $(e.target,{type:"transaction",data:x(e.setData,e.delData),_data:x(e._setData,e._delData),created:e.created,deleted:e.deleted}),o&&(Object.keys(e.delData).length&&s.response(o.fire(new $(e.target,{type:"del",data:e.delData,_data:e._delData,deleted:e.deleted}))),Object.keys(e.setData).length&&s.response(o.fire(new $(e.target,{type:"set",data:e.setData,_data:e._setData,created:e.created}))))),a?s:f}),o},Q=function(e,t){if(!e||!n(e))throw new Error("Target must be of type object!");var r,a,s=function(r){return arguments.length?r:i(t)?f(t,e):e[t]};return r=(a=T.getForTarget(e))?a.fire(new d(e,{type:"get",query:t}),s):s(),i(e)&&!c(t)&&g(r)?function(...t){return K([e],()=>r.apply(e,t))}:r},R=function(e,t){return e.reduce((e,r)=>e&&t(r),!0)},U=function(e,t){if(!e||!n(e))throw new Error("Target must be of type object!");var r,i=function(r){return arguments.length?r:t in e};return(r=T.getForTarget(e))?r.fire(new d(e,{type:"has",query:t}),i):i()},z=function(e,t,r,s=null,o=!1){if(!t||!n(t))throw new Error("Target must be of type object!");l(r)&&(o=s);var f,c,g=r,h={},p={},v=[],b=(r,i,a)=>{var s;h[r]=t[r],U(t,r)||v.push(r),e&&(i=(s=i||{}).value);var o,l,u=function(e){return arguments.length?e:(s?Object.defineProperty(t,r,s):t[r]=i,!0)};if(l=T.getForTarget(t)){var f=s?{type:"def",query:r,descriptor:s,related:a}:{type:"set",query:r,value:i,related:a};o=l.fire(new d(t,f),u)}else o=u();return o?(p[r]=i,p[r]!==h[r]?(h[r]&&n(h[r])&&S(t,r,h[r]),p[r]&&n(p[r])&&M(t,r,p[r])):(delete p[r],delete h[r])):delete h[r],o},m=[];if(i(g)||(a(g)||y(g))&&(g=u(g)))m=g.map(e=>b(e,s,g));else if(l(r)){var w=Object.keys(r);m=w.map(e=>b(e,r[e],w))}return((c=C.getForTarget(t))||o)&&(f=new $(t,{type:"set",data:p,_data:h,created:v}),c&&c.fire(f)),o?f:R(m,e=>e)},B=function(e,t,r=null,n=!1){return z(!1,...arguments)},G=function(e,t){u(t).forEach(t=>{var r,n,i=e[t],a=Object.getOwnPropertyDescriptor(e,t)||{enumerable:!(t in e)};"value"in a&&delete a.value,"writable"in a&&delete a.writable,a.get=()=>{if(r)return i;r=!0;var n=Q(e,t);return r=!1,n},a.set=r=>{if(n)return i=r,!0;n=!0;B(e,t,r);return n=!1,!0},Object.defineProperty(e,t,a)})},H=function(e,t){if(!t||!n(t))throw new Error("Target must be of type object!");var r,i=function(r){return arguments.length?r:e?Object.getOwnPropertyNames(t):Object.keys(t)};return(r=T.getForTarget(t))?r.fire(new d(t,{type:e?"ownKeys":"keys"}),i):i()},J=function(e){return H(!1,...arguments)};var L=function(e,t,r=null,n=!1){return z(!0,...arguments)},V=function(e,t,r=!1){if(!e||!n(e))throw new Error("Target must be of type object!");t=u(t);var i,a,s={},o={},l=[],f=t.map(r=>{s[r]=e[r],U(e,r)&&l.push(r);var i,a,u=function(t){return arguments.length?t:(delete e[r],!0)};return(i=(a=T.getForTarget(e))?a.fire(new d(e,{type:"del",query:r,related:t}),u):u())&&(o[r]=void 0,s[r]&&n(s[r])&&S(e,r,s[r])),i});return((a=C.getForTarget(e))||r)&&(i=new $(e,{type:"del",data:o,_data:s,deleted:l}),a&&Object.keys(o).length&&a.fire(i)),r?i:R(f,e=>e)};class X extends F{fire(e){return this.fireables.forEach(t=>{e.propagationStopped||t.fire(e)}),e}static createForTarget(e,t=X){return super.createForTarget(e,"listeners",t)}static getForTarget(e){return super.getForTarget(e,"listeners")}}var Y=class extends E{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e){this.params.type===e.type&&e.response(this.handler.call(this.target,e.e))}};var Z={build:function e(t,r=!1){if(!t||!n(t))throw new Error("Target must be of type object!");var i=J(t);i.forEach(i=>{var a=Q(t,i);n(a)&&a&&(M(t,i,a),e(a,r))}),r&&G(t,i)},observe:I,unobserve:A,trap:function(e,t,r={}){if(!e||!n(e))throw new Error("Object must be of type object!");if(!g(t))throw new Error('Callback must be a function; "'+N(t)+'" given!');var i;return(i=T.getForTarget(e))||(i=T.createForTarget(e)),i.addFireable(new O(t,r))},untrap:function(e,t=null,r={}){if(!e||!n(e))throw new Error("Object must be of type object!");var i;(i=C.getForTarget(e))&&i.findFireables({handler:t,params:r}).forEach(e=>{i.removeFireable(e)})},def:L,defineProperty:L,set:B,del:V,deleteProperty:V,link:M,unlink:S,transaction:K,get:Q,has:U,init:G,keys:J,ownKeys:function(e){return H(!0,...arguments)},on:function(e,t,r,n={}){var i;return(i=X.getForTarget(e))||(i=X.createForTarget(e)),i.addFireable(new Y(r,x(n,{type:t})))},off:function(e,t,r=null,n={}){var i;(i=X.getForTarget(e))&&i.findFireables({handler:r,type:t,params:n}).forEach(e=>{i.removeFireable(e)})},trigger:function(e,t,r={}){var n;if(n=X.getForTarget(e))return n.fire(new p(e,x(r,{type:t})))},MutationEvent:$,QueryEvent:d,Event:p};window.WebNative||(window.WebNative={}),window.WebNative.Reflex=Z}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,